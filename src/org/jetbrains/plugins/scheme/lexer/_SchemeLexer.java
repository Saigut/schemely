/* The following code was generated by JFlex 1.4.1 on 8/2/09 1:52 AM */

/*
 * Copyright 2000-2009 Red Shark Technology
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package org.jetbrains.plugins.scheme.lexer;

import com.intellij.lexer.FlexLexer;
import com.intellij.psi.tree.IElementType;


/**
 * This class is a scanner generated by
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.1
 * on 8/2/09 1:52 AM from the specification file
 * <tt>src/org/jetbrains/plugins/scheme/lexer/scheme.flex</tt>
 */
public class _SchemeLexer implements Tokens, FlexLexer
{
  /**
   * initial size of the lookahead buffer
   */
  private static final int ZZ_BUFFERSIZE = 16384;

  /**
   * lexical states
   */
  public static final int YYINITIAL = 0;

  /**
   * Translates characters to character classes
   */
  private static final
  String
    ZZ_CMAP_PACKED =
    "\11\0\1\3\1\2\1\0\1\3\1\1\22\0\1\3\1\47\1\40" +
    "\1\7\1\46\1\46\1\46\1\34\1\26\1\27\1\50\1\16\1\36" +
    "\1\17\1\25\1\24\2\6\10\5\1\46\1\45\1\46\1\51\1\52" +
    "\1\46\1\23\1\44\1\13\1\4\1\11\1\15\1\21\1\56\1\46" +
    "\1\14\2\46\1\22\1\57\1\41\1\12\1\43\1\54\1\61\1\20" +
    "\1\53\1\55\1\46\1\42\1\10\1\60\1\46\1\30\1\37\1\31" +
    "\1\46\1\46\1\35\1\44\1\13\1\4\1\11\1\15\1\21\1\56" +
    "\1\46\1\14\2\46\1\22\1\57\1\41\1\12\1\43\1\54\1\61" +
    "\1\20\1\53\1\55\1\46\1\42\1\10\1\60\1\46\1\32\1\0" +
    "\1\33\1\46\uff81\0";

  /**
   * Translates characters to character classes
   */
  private static final char[] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /**
   * Translates DFA states to action switch labels.
   */
  private static final int[] ZZ_ACTION = zzUnpackAction();

  private static final
  String
    ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\1\3\1\4\1\1\11\3\1\5" +
    "\1\6\1\7\1\10\1\11\1\12\1\13\1\14\1\15" +
    "\1\16\1\1\1\3\1\17\5\3\1\4\4\0\1\4" +
    "\5\0\1\20\1\21\1\0\1\22\1\23\1\3\1\24" +
    "\1\3\1\25\1\3\1\4\1\0\3\3\1\0\1\26" +
    "\2\0\1\27\1\3\1\30\4\3\2\4\3\0\1\4" +
    "\2\0\2\4\5\0\1\4\2\0\1\4\3\0\3\31" +
    "\4\3\1\4\1\0\1\4\1\0\1\4\1\3\1\32" +
    "\1\3\1\33\1\34\3\3\1\35\1\36\4\0\1\4" +
    "\2\0\3\4\4\0\1\4\1\0\1\4\4\0\2\4" +
    "\4\0\1\4\2\0\3\3\1\37\2\4\1\0\1\4" +
    "\1\40\1\3\1\41\5\3\4\0\2\4\1\0\1\4" +
    "\1\0\1\4\1\0\2\4\2\0\1\4\1\0\2\4" +
    "\2\0\1\4\1\0\2\4\3\0\1\3\1\42\1\43" +
    "\1\4\3\3\1\44\2\3\1\0\1\4\2\0\1\4" +
    "\1\0\2\4\1\0\3\4\2\0\1\4\1\0\2\4" +
    "\2\0\1\45\1\3\1\46\1\47\2\3\1\0\3\4" +
    "\1\0\2\4\1\0\4\3\1\50\13\3\1\51\1\3" +
    "\1\52\7\3\1\53\1\54\3\3\1\55";

  private static int[] zzUnpackAction()
  {
    int[] result = new int[264];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int[] result)
  {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l)
    {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do
      {
        result[j++] = value;
      }
      while (--count > 0);
    }
    return j;
  }


  /**
   * Translates a state to a row index in the transition table
   */
  private static final int[] ZZ_ROWMAP = zzUnpackRowMap();

  private static final
  String
    ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\62\0\144\0\226\0\310\0\372\0\u012c\0\u015e" +
    "\0\u0190\0\u01c2\0\u01f4\0\u0226\0\u0258\0\u028a\0\u02bc\0\u02ee" +
    "\0\62\0\62\0\62\0\62\0\62\0\62\0\62\0\62" +
    "\0\u0320\0\u0352\0\u0384\0\u03b6\0\u03e8\0\u041a\0\u044c\0\u047e" +
    "\0\u04b0\0\u04e2\0\u0514\0\u0546\0\u0578\0\u05aa\0\u05dc\0\u060e" +
    "\0\u0640\0\u0672\0\u06a4\0\u06d6\0\62\0\62\0\u0708\0\62" +
    "\0\u012c\0\u073a\0\u012c\0\u076c\0\u012c\0\u079e\0\u07d0\0\u0802" +
    "\0\u0834\0\u0866\0\u0898\0\u08ca\0\62\0\u0352\0\u08fc\0\62" +
    "\0\u092e\0\u012c\0\u0960\0\u0992\0\u09c4\0\u09f6\0\u0a28\0\u0a5a" +
    "\0\u0a8c\0\u0abe\0\u0af0\0\u0b22\0\u0b54\0\u0b86\0\u0bb8\0\u0bea" +
    "\0\u0c1c\0\u0c4e\0\u0c80\0\u0258\0\u0cb2\0\u0ce4\0\u0d16\0\u0d48" +
    "\0\u0d7a\0\u0dac\0\u0dde\0\u0e10\0\62\0\u0e42\0\u0e74\0\u0ea6" +
    "\0\u0ed8\0\u0f0a\0\u0f3c\0\u0f6e\0\u0fa0\0\62\0\u0fd2\0\u1004" +
    "\0\u1036\0\u1068\0\u109a\0\62\0\u012c\0\u10cc\0\u10fe\0\u1130" +
    "\0\u012c\0\u012c\0\u1162\0\u1194\0\u11c6\0\u11f8\0\u122a\0\u125c" +
    "\0\u128e\0\u12c0\0\u12f2\0\u1324\0\u1356\0\u1388\0\u13ba\0\u13ec" +
    "\0\u141e\0\u1450\0\u1482\0\u14b4\0\u14e6\0\u1518\0\u154a\0\u157c" +
    "\0\u15ae\0\u15e0\0\u1612\0\u1644\0\u1676\0\u16a8\0\u16da\0\u170c" +
    "\0\u173e\0\u1770\0\u17a2\0\u012c\0\u17d4\0\u1806\0\u1838\0\u186a" +
    "\0\u012c\0\u189c\0\u012c\0\u18ce\0\u1900\0\u1932\0\u1964\0\u1996" +
    "\0\u19c8\0\u19fa\0\u1a2c\0\u1a5e\0\u1a90\0\u1ac2\0\u1ac2\0\u1af4" +
    "\0\u1b26\0\u1b58\0\u1b8a\0\u1bbc\0\u1bee\0\u1c20\0\u1c52\0\u1c84" +
    "\0\u1cb6\0\u1ce8\0\u1d1a\0\u1d4c\0\u1d7e\0\u1db0\0\u1de2\0\u1e14" +
    "\0\u1e46\0\u1e78\0\u1eaa\0\u1edc\0\u1f0e\0\u012c\0\u012c\0\u1f40" +
    "\0\u1f72\0\u1fa4\0\u1fd6\0\u012c\0\u2008\0\u203a\0\u206c\0\u209e" +
    "\0\u20d0\0\u2102\0\u2134\0\u2166\0\u2198\0\u21ca\0\u21fc\0\u222e" +
    "\0\u2260\0\u2292\0\u22c4\0\u22f6\0\u2328\0\u235a\0\u238c\0\u23be" +
    "\0\u23f0\0\u2422\0\u2454\0\u2486\0\u24b8\0\u012c\0\u24ea\0\u251c" +
    "\0\u254e\0\u2580\0\u25b2\0\u25e4\0\u2616\0\u2648\0\u267a\0\u26ac" +
    "\0\u26de\0\u2710\0\u2742\0\u2774\0\u27a6\0\u27d8\0\u280a\0\u283c" +
    "\0\u286e\0\u28a0\0\u28d2\0\u2904\0\u2936\0\u2968\0\u299a\0\u29cc" +
    "\0\u012c\0\u29fe\0\u012c\0\u2a30\0\u2a62\0\u2a94\0\u2ac6\0\u2af8" +
    "\0\u2b2a\0\u2b5c\0\u012c\0\u012c\0\u2b8e\0\u2bc0\0\u2bf2\0\u012c";

  private static int[] zzUnpackRowMap()
  {
    int[] result = new int[264];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int[] result)
  {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l)
    {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /**
   * The transition table of the DFA
   */
  private static final int[] ZZ_TRANS = zzUnpackTrans();

  private static final
  String
    ZZ_TRANS_PACKED_0 =
    "\1\2\3\3\1\4\2\5\1\6\1\7\1\10\1\11" +
    "\1\12\1\13\1\14\2\15\1\16\1\7\1\17\1\2" +
    "\1\7\1\20\1\21\1\22\1\23\1\24\1\25\1\26" +
    "\1\27\1\30\1\31\1\2\1\32\3\7\1\33\1\34" +
    "\3\7\1\35\2\7\1\36\1\37\4\7\63\0\3\3" +
    "\62\0\3\7\1\0\2\7\1\40\13\7\13\0\3\7" +
    "\1\41\1\0\14\7\5\0\2\5\1\42\1\0\1\43" +
    "\3\0\1\43\2\44\3\43\1\45\1\46\1\47\44\0" +
    "\1\50\1\51\1\52\1\53\2\54\3\0\1\55\4\0" +
    "\1\56\10\0\1\57\13\0\1\60\12\0\3\7\1\0" +
    "\16\7\13\0\4\7\1\0\14\7\4\0\3\7\1\0" +
    "\2\7\1\61\2\7\1\62\10\7\13\0\4\7\1\0" +
    "\14\7\4\0\3\7\1\0\16\7\13\0\4\7\1\0" +
    "\13\7\1\63\4\0\3\7\1\0\5\7\1\64\10\7" +
    "\13\0\4\7\1\0\14\7\4\0\3\7\1\0\11\7" +
    "\1\65\4\7\13\0\4\7\1\0\14\7\4\0\3\7" +
    "\1\0\12\7\1\66\3\7\13\0\4\7\1\0\14\7" +
    "\5\0\2\67\16\0\1\70\40\0\3\7\1\0\5\7" +
    "\1\71\10\7\13\0\4\7\1\0\14\7\4\0\3\7" +
    "\1\0\5\7\1\72\10\7\13\0\3\7\1\73\1\0" +
    "\14\7\5\0\2\47\16\0\1\74\57\0\1\75\36\0" +
    "\37\76\1\77\1\100\21\76\4\0\3\7\1\0\16\7" +
    "\13\0\1\101\3\7\1\0\14\7\1\34\2\0\57\34" +
    "\4\0\3\7\1\0\16\7\13\0\4\7\1\0\4\7" +
    "\1\102\7\7\4\0\3\7\1\0\16\7\13\0\4\7" +
    "\1\0\7\7\1\103\4\7\4\0\3\7\1\0\16\7" +
    "\13\0\1\104\3\7\1\0\14\7\4\0\3\7\1\0" +
    "\16\7\13\0\1\105\3\7\1\0\14\7\4\0\3\7" +
    "\1\0\10\7\1\106\5\7\13\0\4\7\1\0\14\7" +
    "\7\0\1\42\1\0\1\43\3\0\1\43\2\44\3\43" +
    "\1\45\1\46\1\107\41\0\2\110\7\0\2\111\47\0" +
    "\2\112\16\0\1\113\41\0\2\114\7\0\2\115\5\0" +
    "\1\116\41\0\2\117\60\0\2\47\1\107\1\0\1\43" +
    "\3\0\1\43\2\44\3\43\1\45\42\0\3\120\1\121" +
    "\1\0\1\120\1\0\1\120\1\0\1\120\2\122\1\0" +
    "\1\120\22\0\1\120\22\0\2\5\1\123\6\0\2\124" +
    "\5\0\1\125\41\0\2\126\1\127\6\0\2\130\50\0" +
    "\1\131\1\132\6\0\2\133\47\0\2\5\1\134\6\0" +
    "\2\124\5\0\1\125\34\0\2\135\1\0\15\135\1\136" +
    "\20\135\1\137\20\135\4\0\3\7\1\0\11\7\1\140" +
    "\1\141\3\7\13\0\4\7\1\0\14\7\4\0\3\7" +
    "\1\0\16\7\13\0\4\7\1\0\10\7\1\142\3\7" +
    "\4\0\3\7\1\0\10\7\1\143\5\7\13\0\4\7" +
    "\1\0\14\7\5\0\2\67\1\144\1\0\1\145\2\0" +
    "\1\146\1\145\2\44\3\145\1\45\1\147\1\150\41\0" +
    "\2\150\57\0\3\7\1\0\16\7\13\0\4\7\1\0" +
    "\5\7\1\151\6\7\4\0\3\7\1\0\16\7\13\0" +
    "\4\7\1\0\5\7\1\152\6\7\4\0\3\7\1\0" +
    "\16\7\13\0\4\7\1\0\11\7\1\153\2\7\25\0" +
    "\1\154\73\0\2\76\25\0\3\7\1\0\1\7\1\155" +
    "\14\7\13\0\4\7\1\0\14\7\4\0\3\7\1\0" +
    "\2\7\1\156\13\7\13\0\3\7\1\157\1\0\14\7" +
    "\4\0\3\7\1\0\16\7\13\0\4\7\1\0\6\7" +
    "\1\160\5\7\4\0\3\7\1\0\1\7\1\161\14\7" +
    "\13\0\4\7\1\0\14\7\4\0\3\7\1\0\5\7" +
    "\1\162\10\7\13\0\4\7\1\0\14\7\7\0\1\107" +
    "\1\0\1\43\3\0\1\43\2\44\3\43\1\45\43\0" +
    "\2\110\7\0\2\44\3\0\1\45\43\0\2\110\60\0" +
    "\2\112\1\163\1\0\1\164\2\0\1\146\1\164\2\0" +
    "\3\164\1\0\1\165\1\166\41\0\2\166\60\0\2\114" +
    "\1\167\1\0\1\170\3\0\1\170\2\0\3\170\1\0" +
    "\1\171\1\172\41\0\2\114\16\0\1\116\41\0\2\172" +
    "\60\0\2\117\1\173\6\0\2\44\3\0\1\45\42\0" +
    "\3\120\1\174\1\0\1\120\1\0\1\120\1\0\1\120" +
    "\2\175\1\0\1\120\1\0\1\176\1\177\17\0\1\120" +
    "\31\0\2\200\50\0\3\201\2\0\1\201\1\0\1\201" +
    "\1\0\1\201\3\0\1\201\22\0\1\201\31\0\2\202" +
    "\51\0\2\47\60\0\2\126\1\203\6\0\2\204\3\0" +
    "\1\205\1\206\51\0\2\207\51\0\2\210\61\0\1\131" +
    "\1\211\6\0\2\212\3\0\1\213\1\214\51\0\2\215" +
    "\52\0\1\216\63\0\1\200\1\202\1\207\1\215\111\0" +
    "\1\217\33\0\1\220\50\0\3\7\1\0\4\7\1\221" +
    "\11\7\13\0\4\7\1\0\14\7\4\0\3\7\1\0" +
    "\16\7\13\0\3\7\1\222\1\0\14\7\4\0\3\7" +
    "\1\0\4\7\1\223\11\7\13\0\4\7\1\0\14\7" +
    "\4\0\3\7\1\0\5\7\1\224\10\7\13\0\4\7" +
    "\1\0\14\7\7\0\1\144\1\0\1\145\2\0\1\146" +
    "\1\145\2\44\3\145\1\45\1\147\1\225\41\0\2\226" +
    "\7\0\2\227\47\0\2\230\60\0\2\150\1\225\1\0" +
    "\1\145\2\0\1\146\1\145\2\44\3\145\1\45\42\0" +
    "\3\7\1\0\16\7\13\0\4\7\1\0\1\7\1\231" +
    "\12\7\4\0\3\7\1\0\7\7\1\232\6\7\13\0" +
    "\4\7\1\0\2\7\1\233\10\7\1\234\4\0\3\7" +
    "\1\0\3\7\1\235\12\7\13\0\4\7\1\0\14\7" +
    "\4\0\3\7\1\0\16\7\13\0\4\7\1\0\5\7" +
    "\1\236\6\7\4\0\3\7\1\0\10\7\1\237\5\7" +
    "\13\0\4\7\1\0\14\7\4\0\3\7\1\0\16\7" +
    "\13\0\4\7\1\0\7\7\1\240\4\7\7\0\1\163" +
    "\1\0\1\164\2\0\1\146\1\164\2\0\3\164\1\0" +
    "\1\165\1\241\41\0\2\242\7\0\2\243\47\0\2\244" +
    "\60\0\2\166\1\241\1\0\1\164\2\0\1\146\1\164" +
    "\2\0\3\164\46\0\1\167\1\0\1\170\3\0\1\170" +
    "\2\0\3\170\1\0\1\171\1\245\41\0\2\246\7\0" +
    "\2\247\47\0\2\250\60\0\2\172\1\245\1\0\1\170" +
    "\3\0\1\170\2\0\3\170\46\0\1\173\6\0\2\44" +
    "\3\0\1\45\45\0\1\174\6\0\2\175\3\0\1\176" +
    "\1\177\41\0\3\251\2\0\1\251\1\0\1\251\1\0" +
    "\1\251\3\0\1\251\22\0\1\251\21\0\3\252\2\0" +
    "\1\252\1\0\1\252\1\0\1\252\2\253\1\0\1\252" +
    "\22\0\1\252\21\0\3\254\2\0\1\254\1\0\1\254" +
    "\1\0\1\254\3\0\1\254\22\0\1\254\21\0\3\120" +
    "\2\0\1\120\1\0\1\120\1\0\1\120\2\122\1\0" +
    "\1\120\22\0\1\120\21\0\3\201\1\255\1\0\1\201" +
    "\1\0\1\201\1\146\1\201\2\175\1\0\1\201\1\0" +
    "\1\176\1\256\17\0\1\201\22\0\2\5\7\0\2\124" +
    "\5\0\1\125\43\0\1\203\6\0\2\204\3\0\1\205" +
    "\1\206\42\0\2\257\60\0\2\260\7\0\2\261\47\0" +
    "\2\262\60\0\2\126\7\0\2\130\47\0\2\210\1\263" +
    "\4\0\1\146\1\0\2\204\3\0\1\205\1\264\44\0" +
    "\1\211\6\0\2\212\3\0\1\213\1\214\43\0\1\265" +
    "\61\0\1\266\7\0\2\267\50\0\1\270\61\0\1\131" +
    "\7\0\2\133\50\0\1\216\1\271\4\0\1\146\1\0" +
    "\2\212\3\0\1\213\1\272\101\0\1\273\57\0\1\274" +
    "\23\0\3\7\1\0\16\7\13\0\1\275\3\7\1\0" +
    "\14\7\4\0\3\7\1\0\16\7\13\0\4\7\1\0" +
    "\12\7\1\276\1\7\4\0\3\7\1\0\16\7\13\0" +
    "\1\277\3\7\1\0\14\7\7\0\1\225\1\0\1\145" +
    "\2\0\1\146\1\145\2\44\3\145\1\45\43\0\2\226" +
    "\5\0\1\146\1\0\2\44\3\0\1\45\43\0\2\226" +
    "\60\0\2\230\1\300\4\0\1\146\1\0\2\44\3\0" +
    "\1\45\42\0\3\7\1\0\10\7\1\301\5\7\13\0" +
    "\4\7\1\0\14\7\4\0\3\7\1\0\5\7\1\302" +
    "\10\7\13\0\4\7\1\0\14\7\4\0\3\7\1\0" +
    "\1\7\1\303\14\7\13\0\4\7\1\0\14\7\4\0" +
    "\3\7\1\0\5\7\1\304\10\7\13\0\4\7\1\0" +
    "\14\7\4\0\3\7\1\0\4\7\1\305\11\7\13\0" +
    "\4\7\1\0\14\7\4\0\3\7\1\0\2\7\1\306" +
    "\13\7\13\0\4\7\1\0\14\7\7\0\1\241\1\0" +
    "\1\164\2\0\1\146\1\164\2\0\3\164\44\0\2\242" +
    "\5\0\1\146\52\0\2\242\60\0\2\244\1\307\4\0" +
    "\1\146\54\0\1\245\1\0\1\170\3\0\1\170\2\0" +
    "\3\170\44\0\2\246\60\0\2\250\1\310\56\0\3\251" +
    "\1\311\1\0\1\251\1\0\1\251\1\146\1\251\3\0" +
    "\1\251\2\0\1\312\17\0\1\251\21\0\3\252\1\313" +
    "\1\0\1\252\1\0\1\252\1\0\1\252\3\0\1\252" +
    "\2\0\1\314\17\0\1\252\21\0\3\252\2\0\1\252" +
    "\1\0\1\252\1\0\1\252\3\0\1\252\22\0\1\252" +
    "\21\0\3\254\1\315\1\0\1\254\1\0\1\254\1\0" +
    "\1\254\2\175\1\0\1\254\1\0\1\176\20\0\1\254" +
    "\24\0\1\255\4\0\1\146\1\0\2\175\3\0\1\176" +
    "\1\256\41\0\3\316\2\0\1\316\1\0\1\316\1\0" +
    "\1\316\3\0\1\316\22\0\1\316\22\0\2\257\1\317" +
    "\4\0\1\146\7\0\1\165\42\0\2\260\1\320\14\0" +
    "\1\171\42\0\2\260\60\0\2\262\1\321\6\0\2\204" +
    "\3\0\1\205\45\0\1\263\4\0\1\146\1\0\2\204" +
    "\3\0\1\205\1\264\42\0\2\322\61\0\1\265\1\323" +
    "\4\0\1\146\7\0\1\324\43\0\1\266\1\325\14\0" +
    "\1\326\43\0\1\266\61\0\1\270\1\327\6\0\2\212" +
    "\3\0\1\213\45\0\1\271\4\0\1\146\1\0\2\212" +
    "\3\0\1\213\1\272\43\0\1\330\57\0\1\331\77\0" +
    "\1\332\43\0\3\7\1\0\5\7\1\333\10\7\13\0" +
    "\4\7\1\0\14\7\7\0\1\300\4\0\1\146\1\0" +
    "\2\44\3\0\1\45\42\0\3\7\1\0\16\7\13\0" +
    "\4\7\1\0\12\7\1\334\1\7\4\0\1\335\2\7" +
    "\1\0\16\7\13\0\4\7\1\0\14\7\4\0\3\7" +
    "\1\0\16\7\13\0\3\7\1\336\1\0\14\7\4\0" +
    "\3\7\1\0\16\7\13\0\4\7\1\0\6\7\1\337" +
    "\5\7\4\0\3\7\1\0\16\7\13\0\4\7\1\0" +
    "\5\7\1\340\6\7\7\0\1\307\4\0\1\146\54\0" +
    "\1\310\61\0\1\311\4\0\1\146\7\0\1\312\41\0" +
    "\3\341\2\0\1\341\1\0\1\341\1\0\1\341\3\0" +
    "\1\341\22\0\1\341\24\0\1\313\14\0\1\314\41\0" +
    "\3\342\2\0\1\342\1\0\1\342\1\0\1\342\3\0" +
    "\1\342\22\0\1\342\24\0\1\315\6\0\2\175\3\0" +
    "\1\176\42\0\3\316\1\343\1\0\1\316\1\0\1\316" +
    "\1\146\1\316\2\175\1\0\1\316\1\0\1\176\20\0" +
    "\1\316\24\0\1\317\4\0\1\146\7\0\1\165\44\0" +
    "\1\320\14\0\1\171\44\0\1\321\6\0\2\204\3\0" +
    "\1\205\43\0\2\322\1\344\4\0\1\146\1\0\2\204" +
    "\3\0\1\205\45\0\1\323\4\0\1\146\7\0\1\324" +
    "\43\0\1\345\62\0\1\325\14\0\1\326\43\0\1\346" +
    "\62\0\1\327\6\0\2\212\3\0\1\213\44\0\1\330" +
    "\1\347\4\0\1\146\1\0\2\212\3\0\1\213\53\0" +
    "\1\135\60\0\1\350\51\0\3\7\1\0\7\7\1\351" +
    "\6\7\13\0\4\7\1\0\14\7\4\0\3\7\1\0" +
    "\16\7\13\0\1\352\3\7\1\0\14\7\4\0\3\7" +
    "\1\0\7\7\1\353\6\7\13\0\4\7\1\0\14\7" +
    "\4\0\3\7\1\0\16\7\13\0\4\7\1\0\7\7" +
    "\1\354\4\7\4\0\3\7\1\0\5\7\1\355\10\7" +
    "\13\0\4\7\1\0\14\7\4\0\3\341\1\307\1\0" +
    "\1\341\1\0\1\341\1\146\1\341\3\0\1\341\22\0" +
    "\1\341\21\0\3\342\1\310\1\0\1\342\1\0\1\342" +
    "\1\0\1\342\3\0\1\342\22\0\1\342\24\0\1\343" +
    "\4\0\1\146\1\0\2\175\3\0\1\176\45\0\1\344" +
    "\4\0\1\146\1\0\2\204\3\0\1\205\44\0\1\345" +
    "\1\307\4\0\1\146\53\0\1\346\1\310\61\0\1\347" +
    "\4\0\1\146\1\0\2\212\3\0\1\213\77\0\1\331" +
    "\24\0\3\7\1\0\10\7\1\356\5\7\13\0\4\7" +
    "\1\0\14\7\4\0\3\7\1\0\16\7\13\0\4\7" +
    "\1\0\5\7\1\357\6\7\4\0\3\7\1\0\10\7" +
    "\1\360\5\7\13\0\4\7\1\0\14\7\4\0\3\7" +
    "\1\0\2\7\1\361\13\7\13\0\4\7\1\0\14\7" +
    "\4\0\3\7\1\0\7\7\1\362\6\7\13\0\4\7" +
    "\1\0\14\7\4\0\3\7\1\0\16\7\13\0\4\7" +
    "\1\0\12\7\1\363\1\7\4\0\3\7\1\0\16\7" +
    "\13\0\3\7\1\364\1\0\14\7\4\0\3\7\1\0" +
    "\16\7\13\0\4\7\1\0\12\7\1\365\1\7\4\0" +
    "\3\7\1\0\16\7\13\0\4\7\1\0\5\7\1\366" +
    "\6\7\4\0\3\7\1\0\10\7\1\367\5\7\13\0" +
    "\4\7\1\0\14\7\4\0\3\7\1\0\16\7\13\0" +
    "\1\370\3\7\1\0\14\7\4\0\3\7\1\0\1\371" +
    "\15\7\13\0\4\7\1\0\14\7\4\0\3\7\1\0" +
    "\16\7\13\0\1\372\3\7\1\0\14\7\4\0\3\7" +
    "\1\0\5\7\1\373\10\7\13\0\4\7\1\0\14\7" +
    "\4\0\3\7\1\0\16\7\13\0\2\7\1\374\1\7" +
    "\1\0\14\7\4\0\3\7\1\0\16\7\13\0\4\7" +
    "\1\0\5\7\1\375\6\7\4\0\3\7\1\0\16\7" +
    "\13\0\4\7\1\0\5\7\1\376\6\7\4\0\3\7" +
    "\1\0\12\7\1\377\3\7\13\0\4\7\1\0\14\7" +
    "\4\0\3\7\1\0\16\7\13\0\3\7\1\u0100\1\0" +
    "\14\7\4\0\3\7\1\0\16\7\13\0\3\7\1\u0101" +
    "\1\0\14\7\4\0\3\7\1\0\4\7\1\u0102\11\7" +
    "\13\0\4\7\1\0\14\7\4\0\3\7\1\0\1\u0103" +
    "\15\7\13\0\4\7\1\0\14\7\4\0\3\7\1\0" +
    "\1\u0104\15\7\13\0\4\7\1\0\14\7\4\0\1\u0105" +
    "\2\7\1\0\16\7\13\0\4\7\1\0\14\7\4\0" +
    "\3\7\1\0\4\7\1\u0106\11\7\13\0\4\7\1\0" +
    "\14\7\4\0\3\7\1\0\16\7\13\0\1\u0107\3\7" +
    "\1\0\14\7\4\0\3\7\1\0\16\7\13\0\4\7" +
    "\1\0\10\7\1\u0108\3\7";

  private static int[] zzUnpackTrans()
  {
    int[] result = new int[11300];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int[] result)
  {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l)
    {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do
      {
        result[j++] = value;
      }
      while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;
  private static final char[] EMPTY_BUFFER = new char[0];
  private static final int YYEOF = -1;
  private static java.io.Reader zzReader = null; // Fake

  /* error messages for the codes above */
  private static final
  String
    ZZ_ERROR_MSG
    [
    ] =
    {"Unkown internal scanner error", "Error: could not match input", "Error: pushback value was too large"};

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int[] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final
  String
    ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\16\1\10\11\12\1\4\0\1\1\5\0" +
    "\2\11\1\0\1\11\7\1\1\0\3\1\1\0\1\11" +
    "\2\0\1\11\10\1\3\0\1\1\2\0\2\1\5\0" +
    "\1\1\2\0\1\1\3\0\1\11\7\1\1\0\1\11" +
    "\1\0\4\1\1\11\6\1\4\0\1\1\2\0\3\1" +
    "\4\0\1\1\1\0\1\1\4\0\2\1\4\0\1\1" +
    "\2\0\6\1\1\0\11\1\4\0\2\1\1\0\1\1" +
    "\1\0\1\1\1\0\2\1\2\0\1\1\1\0\2\1" +
    "\2\0\1\1\1\0\2\1\3\0\12\1\1\0\1\1" +
    "\2\0\1\1\1\0\2\1\1\0\3\1\2\0\1\1" +
    "\1\0\2\1\2\0\6\1\1\0\3\1\1\0\2\1" +
    "\1\0\40\1";

  private static int[] zzUnpackAttribute()
  {
    int[] result = new int[264];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int[] result)
  {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l)
    {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do
      {
        result[j++] = value;
      }
      while (--count > 0);
    }
    return j;
  }

  /**
   * the current state of the DFA
   */
  private int zzState;

  /**
   * the current lexical state
   */
  private int zzLexicalState = YYINITIAL;

  /**
   * this buffer contains the current text to be matched and is
   * the source of the yytext() string
   */
  private CharSequence zzBuffer = "";

  /**
   * this buffer may contains the current text array to be matched when it is cheap to acquire it
   */
  private char[] zzBufferArray;

  /**
   * the textposition at the last accepting state
   */
  private int zzMarkedPos;

  /**
   * the textposition at the last state to be included in yytext
   */
  private int zzPushbackPos;

  /**
   * the current text position in the buffer
   */
  private int zzCurrentPos;

  /**
   * startRead marks the beginning of the yytext() string in the buffer
   */
  private int zzStartRead;

  /**
   * endRead marks the last character in the buffer, that has been read
   * from input
   */
  private int zzEndRead;

  /**
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /**
   * zzAtEOF == true <=> the scanner is at the EOF
   */
  private boolean zzAtEOF;

  /**
   * denotes if the user-EOF-code has already been executed
   */
  private boolean zzEOFDone;

  /* user code: */
  /*
  public final int getTokenStart(){
    return zzStartRead;
  }

  public final int getTokenEnd(){
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end,int initialState) {
    char [] buf = buffer.toString().substring(start,end).toCharArray();
    yyreset( new CharArrayReader( buf ) );
    yybegin(initialState);
  }
  
  public void reset(CharSequence buffer, int initialState){
    reset(buffer, 0, buffer.length(), initialState);
  }
  */


  public _SchemeLexer(java.io.Reader in)
  {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param in the java.io.Inputstream to read input from.
   */
  public _SchemeLexer(java.io.InputStream in)
  {
    this(new java.io.InputStreamReader(in));
  }

  /**
   * Unpacks the compressed character translation table.
   *
   * @param packed the packed character translation table
   * @return the unpacked character translation table
   */
  private static char[] zzUnpackCMap(String packed)
  {
    char[] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 186)
    {
      int count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do
      {
        map[j++] = value;
      }
      while (--count > 0);
    }
    return map;
  }

  public final int getTokenStart()
  {
    return zzStartRead;
  }

  public final int getTokenEnd()
  {
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end, int initialState)
  {
    zzBuffer = buffer;
    zzBufferArray = com.intellij.util.text.CharArrayUtil.fromSequenceWithoutCopying(buffer);
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzPushbackPos = 0;
    zzAtEOF = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  // For Demetra compatibility
  public void reset(CharSequence buffer, int initialState)
  {
    zzBuffer = buffer;
    zzBufferArray = null;
    zzCurrentPos = zzMarkedPos = zzStartRead = 0;
    zzPushbackPos = 0;
    zzAtEOF = false;
    zzAtBOL = true;
    zzEndRead = buffer.length();
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return <code>false</code>, iff there was new input.
   * @throws java.io.IOException if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException
  {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate()
  {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState)
  {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext()
  {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position <tt>pos</tt> from the
   * matched text.
   * <p/>
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   * @return the character at position pos
   */
  public final char yycharat(int pos)
  {
    return zzBufferArray != null ? zzBufferArray[zzStartRead + pos] : zzBuffer.charAt(zzStartRead + pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength()
  {
    return zzMarkedPos - zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   * <p/>
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   * <p/>
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param errorCode the code of the errormessage to display
   */
  private void zzScanError(int errorCode)
  {
    String message;
    try
    {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e)
    {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   * <p/>
   * They will be read again by then next call of the scanning method
   *
   * @param number the number of characters to be read again.
   *               This number must not be greater than yylength()!
   */
  public void yypushback(int number)
  {
    if (number > yylength())
    {
      zzScanError(ZZ_PUSHBACK_2BIG);
    }

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF()
  {
    if (!zzEOFDone)
    {
      zzEOFDone = true;

    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return the next token
   * @throws java.io.IOException if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException
  {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;
    char[] zzBufferArrayL = zzBufferArray;
    char[] zzCMapL = ZZ_CMAP;

    int[] zzTransL = ZZ_TRANS;
    int[] zzRowMapL = ZZ_ROWMAP;
    int[] zzAttrL = ZZ_ATTRIBUTE;

    while (true)
    {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = zzLexicalState;


      zzForAction:
      {
        while (true)
        {

          if (zzCurrentPosL < zzEndReadL)
          {
            zzInput = zzBufferL.charAt(zzCurrentPosL++);
          }
          else if (zzAtEOF)
          {
            zzInput = YYEOF;
            break zzForAction;
          }
          else
          {
            // store back cached positions
            zzCurrentPos = zzCurrentPosL;
            zzMarkedPos = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL = zzCurrentPos;
            zzMarkedPosL = zzMarkedPos;
            zzBufferL = zzBuffer;
            zzEndReadL = zzEndRead;
            if (eof)
            {
              zzInput = YYEOF;
              break zzForAction;
            }
            else
            {
              zzInput = zzBufferL.charAt(zzCurrentPosL++);
            }
          }
          int zzNext = zzTransL[zzRowMapL[zzState] + zzCMapL[zzInput]];
          if (zzNext == -1)
          {
            break zzForAction;
          }
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ((zzAttributes & 1) == 1)
          {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ((zzAttributes & 8) == 8)
            {
              break zzForAction;
            }
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction])
      {
        case 21:
        {
          return IF;
        }
        case 46:
          break;
        case 11:
        {
          return RIGHT_CURLY;
        }
        case 47:
          break;
        case 24:
        {
          return ARROW;
        }
        case 48:
          break;
        case 4:
        {
          return NUMBER_LITERAL;
        }
        case 49:
          break;
        case 17:
        {
          return OPEN_VECTOR;
        }
        case 50:
          break;
        case 41:
        {
          return LET_SYNTAX;
        }
        case 51:
          break;
        case 45:
        {
          return UNQUOTE_SPLICING;
        }
        case 52:
          break;
        case 13:
        {
          return BACKQUOTE;
        }
        case 53:
          break;
        case 16:
        {
          return FALSE;
        }
        case 54:
          break;
        case 6:
        {
          return LEFT_PAREN;
        }
        case 55:
          break;
        case 22:
        {
          return COMMA_AT;
        }
        case 56:
          break;
        case 35:
        {
          return BEGIN;
        }
        case 57:
          break;
        case 14:
        {
          return COMMA;
        }
        case 58:
          break;
        case 5:
        {
          return DOT;
        }
        case 59:
          break;
        case 15:
        {
          return COMMENT;
        }
        case 60:
          break;
        case 27:
        {
          return DOTDOTDOT;
        }
        case 61:
          break;
        case 29:
        {
          return COND;
        }
        case 62:
          break;
        case 20:
        {
          return OR;
        }
        case 63:
          break;
        case 23:
        {
          return STRING_LITERAL;
        }
        case 64:
          break;
        case 44:
        {
          return LETREC_SYNTAX;
        }
        case 65:
          break;
        case 28:
        {
          return AND;
        }
        case 66:
          break;
        case 12:
        {
          return QUOTE_MARK;
        }
        case 67:
          break;
        case 42:
        {
          return QUASIQUOTE;
        }
        case 68:
          break;
        case 38:
        {
          return LETREC;
        }
        case 69:
          break;
        case 9:
        {
          return RIGHT_SQUARE;
        }
        case 70:
          break;
        case 2:
        {
          return WHITESPACE;
        }
        case 71:
          break;
        case 39:
        {
          return LAMBDA;
        }
        case 72:
          break;
        case 36:
        {
          return QUOTE;
        }
        case 73:
          break;
        case 19:
        {
          return DO;
        }
        case 74:
          break;
        case 7:
        {
          return RIGHT_PAREN;
        }
        case 75:
          break;
        case 32:
        {
          return SET;
        }
        case 76:
          break;
        case 31:
        {
          return ELSE;
        }
        case 77:
          break;
        case 10:
        {
          return LEFT_CURLY;
        }
        case 78:
          break;
        case 30:
        {
          return CASE;
        }
        case 79:
          break;
        case 34:
        {
          return DELAY;
        }
        case 80:
          break;
        case 25:
        {
          return CHAR_LITERAL;
        }
        case 81:
          break;
        case 26:
        {
          return LET;
        }
        case 82:
          break;
        case 43:
        {
          return DEFINE_SYNTAX;
        }
        case 83:
          break;
        case 18:
        {
          return TRUE;
        }
        case 84:
          break;
        case 1:
        {
          return BAD_CHARACTER;
        }
        case 85:
          break;
        case 3:
        {
          return IDENTIFIER;
        }
        case 86:
          break;
        case 8:
        {
          return LEFT_SQUARE;
        }
        case 87:
          break;
        case 33:
        {
          return LET_STAR;
        }
        case 88:
          break;
        case 40:
        {
          return UNQUOTE;
        }
        case 89:
          break;
        case 37:
        {
          return DEFINE;
        }
        case 90:
          break;
        default:
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos)
          {
            zzAtEOF = true;
            zzDoEOF();
            return null;
          }
          else
          {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
