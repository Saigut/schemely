/* The following code was generated by JFlex 1.4.1 on 10/27/09 9:22 PM */

/*
 * Copyright 2000-2009 Red Shark Technology
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package org.jetbrains.plugins.scheme.lexer;

import com.intellij.lexer.FlexLexer;
import com.intellij.psi.tree.IElementType;
import java.util.*;
import java.io.CharArrayReader;
import org.jetbrains.annotations.NotNull;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.1
 * on 10/27/09 9:22 PM from the specification file
 * <tt>src/org/jetbrains/plugins/scheme/lexer/scheme.flex</tt>
 */
public class _SchemeLexer implements Tokens, FlexLexer {
  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\3\1\2\1\0\1\3\1\1\22\0\1\3\1\45\1\37"+
    "\1\7\1\45\1\45\1\45\1\33\1\25\1\26\1\45\1\16\1\35"+
    "\1\16\1\24\1\23\2\6\10\5\1\45\1\44\1\45\1\46\1\47"+
    "\1\45\1\22\1\43\1\13\1\4\1\11\1\15\1\20\2\45\1\14"+
    "\2\45\1\21\1\45\1\40\1\12\1\42\2\45\1\17\1\50\2\45"+
    "\1\41\1\10\2\45\1\27\1\36\1\30\1\45\1\45\1\34\1\43"+
    "\1\13\1\4\1\11\1\15\1\20\2\45\1\14\2\45\1\21\1\45"+
    "\1\40\1\12\1\42\2\45\1\17\1\50\2\45\1\41\1\10\2\45"+
    "\1\31\1\0\1\32\1\45\uff81\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\1\3\1\4\1\1\1\3\1\5"+
    "\1\6\1\7\1\10\1\11\1\12\1\13\1\14\1\15"+
    "\1\16\1\1\1\17\1\3\1\4\4\0\1\4\5\0"+
    "\1\20\1\21\1\0\1\22\1\4\2\0\1\23\2\0"+
    "\1\24\1\25\2\4\3\0\1\4\2\0\2\4\5\0"+
    "\1\4\2\0\1\4\3\0\3\26\1\4\1\0\1\4"+
    "\1\0\1\4\1\27\4\0\1\4\2\0\3\4\4\0"+
    "\1\4\1\0\1\4\4\0\2\4\4\0\1\4\2\0"+
    "\2\4\1\0\1\4\4\0\2\4\1\0\1\4\1\0"+
    "\1\4\1\0\2\4\2\0\1\4\1\0\2\4\2\0"+
    "\1\4\1\0\2\4\3\0\1\4\1\0\1\4\2\0"+
    "\1\4\1\0\2\4\1\0\3\4\2\0\1\4\1\0"+
    "\2\4\3\0\3\4\1\0\2\4\1\0";

  private static int [] zzUnpackAction() {
    int [] result = new int[165];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\51\0\122\0\173\0\244\0\315\0\366\0\u011f"+
    "\0\51\0\51\0\51\0\51\0\51\0\51\0\51\0\51"+
    "\0\u0148\0\u0171\0\u019a\0\u01c3\0\u01ec\0\u0215\0\u023e\0\u0267"+
    "\0\u0290\0\u02b9\0\u02e2\0\u030b\0\u0334\0\u035d\0\u0386\0\51"+
    "\0\51\0\u03af\0\51\0\u03d8\0\u0401\0\u042a\0\51\0\u0171"+
    "\0\u0453\0\51\0\173\0\u047c\0\u04a5\0\u04ce\0\u04f7\0\u0520"+
    "\0\u0549\0\u0572\0\u059b\0\u05c4\0\u05ed\0\u0616\0\u063f\0\u0668"+
    "\0\366\0\u0691\0\u06ba\0\u06e3\0\u070c\0\u0735\0\u075e\0\u0787"+
    "\0\u07b0\0\51\0\u07d9\0\u0802\0\u082b\0\u0854\0\51\0\u087d"+
    "\0\u08a6\0\51\0\u08cf\0\u08f8\0\u0921\0\u094a\0\u0973\0\u099c"+
    "\0\u09c5\0\u09ee\0\u0a17\0\u0a40\0\u0a69\0\u0a92\0\u0abb\0\u0ae4"+
    "\0\u0b0d\0\u0b36\0\u0b5f\0\u0b88\0\u0bb1\0\u0bda\0\u0c03\0\u0c2c"+
    "\0\u0c55\0\u0c7e\0\u0ca7\0\u0cd0\0\u0cf9\0\u0d22\0\u0d4b\0\u0d74"+
    "\0\u0d9d\0\u0dc6\0\u0def\0\u0e18\0\u0e41\0\u0e6a\0\u0e93\0\u0ebc"+
    "\0\u0ee5\0\u0f0e\0\u0f0e\0\u0f37\0\u0f60\0\u0f89\0\u0fb2\0\u0fdb"+
    "\0\u1004\0\u102d\0\u1056\0\u107f\0\u10a8\0\u10d1\0\u10fa\0\u1123"+
    "\0\u114c\0\u1175\0\u119e\0\u11c7\0\u11f0\0\u1219\0\u1242\0\u126b"+
    "\0\u1294\0\u12bd\0\u12e6\0\u130f\0\u1338\0\u1361\0\u138a\0\u13b3"+
    "\0\u13dc\0\u1405\0\u142e\0\u1457\0\u1480\0\u14a9\0\u14d2\0\u14fb"+
    "\0\u1524\0\u154d\0\u1576\0\u159f\0\u15c8\0\u15f1\0\u161a\0\u1643"+
    "\0\u166c\0\u1695\0\u16be\0\u16e7\0\u1710";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[165];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\3\3\1\4\2\5\1\6\6\4\1\7\5\4"+
    "\1\10\1\11\1\12\1\13\1\14\1\15\1\16\1\17"+
    "\1\20\1\21\1\2\1\22\4\4\1\23\1\4\1\24"+
    "\2\4\52\0\3\3\51\0\3\4\1\0\15\4\13\0"+
    "\4\4\1\0\4\4\5\0\2\5\1\25\1\0\1\26"+
    "\3\0\1\26\1\27\3\26\1\30\1\31\1\32\34\0"+
    "\1\33\1\34\1\35\1\36\2\37\2\0\1\40\4\0"+
    "\1\41\10\0\1\42\11\0\1\43\5\0\2\44\15\0"+
    "\1\45\31\0\2\32\15\0\1\46\46\0\1\47\26\0"+
    "\36\50\1\51\1\52\11\50\1\23\2\0\46\23\4\0"+
    "\3\4\1\0\15\4\13\0\4\4\1\0\2\4\1\53"+
    "\1\4\7\0\1\25\1\0\1\26\3\0\1\26\1\27"+
    "\3\26\1\30\1\31\1\54\31\0\2\55\7\0\1\56"+
    "\37\0\2\57\15\0\1\60\31\0\2\61\7\0\1\62"+
    "\5\0\1\63\31\0\2\64\47\0\2\32\1\54\1\0"+
    "\1\26\3\0\1\26\1\27\3\26\1\30\32\0\3\65"+
    "\1\66\1\0\1\65\1\0\1\65\1\0\1\65\1\67"+
    "\1\0\1\65\22\0\1\65\12\0\2\5\1\70\6\0"+
    "\1\71\5\0\1\72\31\0\2\73\1\74\6\0\1\75"+
    "\40\0\1\76\1\77\6\0\1\100\37\0\2\5\1\101"+
    "\6\0\1\71\5\0\1\72\24\0\2\102\1\0\14\102"+
    "\1\103\20\102\1\104\10\102\5\0\2\44\1\105\1\0"+
    "\1\106\2\0\1\107\1\106\1\27\3\106\1\30\1\110"+
    "\1\111\31\0\2\111\66\0\1\112\24\0\2\50\1\0"+
    "\46\50\7\0\1\54\1\0\1\26\3\0\1\26\1\27"+
    "\3\26\1\30\33\0\2\55\7\0\1\27\3\0\1\30"+
    "\33\0\2\55\47\0\2\57\1\113\1\0\1\114\2\0"+
    "\1\107\1\114\1\0\3\114\1\0\1\115\1\116\31\0"+
    "\2\116\47\0\2\61\1\117\1\0\1\120\3\0\1\120"+
    "\1\0\3\120\1\0\1\121\1\122\31\0\2\61\15\0"+
    "\1\63\31\0\2\122\47\0\2\64\1\123\6\0\1\27"+
    "\3\0\1\30\32\0\3\65\1\124\1\0\1\65\1\0"+
    "\1\65\1\0\1\65\1\125\1\0\1\65\1\0\1\126"+
    "\1\127\17\0\1\65\21\0\2\130\37\0\3\131\2\0"+
    "\1\131\1\0\1\131\1\0\1\131\2\0\1\131\22\0"+
    "\1\131\21\0\2\132\40\0\2\32\47\0\2\73\1\133"+
    "\6\0\1\134\3\0\1\135\1\136\41\0\2\137\40\0"+
    "\2\140\50\0\1\76\1\141\6\0\1\142\3\0\1\143"+
    "\1\144\41\0\2\145\41\0\1\146\52\0\1\130\1\132"+
    "\1\137\1\145\77\0\1\147\23\0\1\150\42\0\1\105"+
    "\1\0\1\106\2\0\1\107\1\106\1\27\3\106\1\30"+
    "\1\110\1\151\31\0\2\152\7\0\1\153\37\0\2\154"+
    "\47\0\2\111\1\151\1\0\1\106\2\0\1\107\1\106"+
    "\1\27\3\106\1\30\35\0\1\113\1\0\1\114\2\0"+
    "\1\107\1\114\1\0\3\114\1\0\1\115\1\155\31\0"+
    "\2\156\7\0\1\157\37\0\2\160\47\0\2\116\1\155"+
    "\1\0\1\114\2\0\1\107\1\114\1\0\3\114\36\0"+
    "\1\117\1\0\1\120\3\0\1\120\1\0\3\120\1\0"+
    "\1\121\1\161\31\0\2\162\7\0\1\163\37\0\2\164"+
    "\47\0\2\122\1\161\1\0\1\120\3\0\1\120\1\0"+
    "\3\120\36\0\1\123\6\0\1\27\3\0\1\30\35\0"+
    "\1\124\6\0\1\125\3\0\1\126\1\127\31\0\3\165"+
    "\2\0\1\165\1\0\1\165\1\0\1\165\2\0\1\165"+
    "\22\0\1\165\11\0\3\166\2\0\1\166\1\0\1\166"+
    "\1\0\1\166\1\167\1\0\1\166\22\0\1\166\11\0"+
    "\3\170\2\0\1\170\1\0\1\170\1\0\1\170\2\0"+
    "\1\170\22\0\1\170\11\0\3\65\2\0\1\65\1\0"+
    "\1\65\1\0\1\65\1\67\1\0\1\65\22\0\1\65"+
    "\11\0\3\131\1\171\1\0\1\131\1\0\1\131\1\107"+
    "\1\131\1\125\1\0\1\131\1\0\1\126\1\172\17\0"+
    "\1\131\12\0\2\5\7\0\1\71\5\0\1\72\33\0"+
    "\1\133\6\0\1\134\3\0\1\135\1\136\32\0\2\173"+
    "\47\0\2\174\7\0\1\175\37\0\2\176\47\0\2\73"+
    "\7\0\1\75\37\0\2\140\1\177\4\0\1\107\1\0"+
    "\1\134\3\0\1\135\1\200\34\0\1\141\6\0\1\142"+
    "\3\0\1\143\1\144\33\0\1\201\50\0\1\202\7\0"+
    "\1\203\40\0\1\204\50\0\1\76\7\0\1\100\40\0"+
    "\1\146\1\205\4\0\1\107\1\0\1\142\3\0\1\143"+
    "\1\206\70\0\1\207\46\0\1\210\16\0\1\151\1\0"+
    "\1\106\2\0\1\107\1\106\1\27\3\106\1\30\33\0"+
    "\2\152\5\0\1\107\1\0\1\27\3\0\1\30\33\0"+
    "\2\152\47\0\2\154\1\211\4\0\1\107\1\0\1\27"+
    "\3\0\1\30\35\0\1\155\1\0\1\114\2\0\1\107"+
    "\1\114\1\0\3\114\34\0\2\156\5\0\1\107\41\0"+
    "\2\156\47\0\2\160\1\212\4\0\1\107\43\0\1\161"+
    "\1\0\1\120\3\0\1\120\1\0\3\120\34\0\2\162"+
    "\47\0\2\164\1\213\45\0\3\165\1\214\1\0\1\165"+
    "\1\0\1\165\1\107\1\165\2\0\1\165\2\0\1\215"+
    "\17\0\1\165\11\0\3\166\1\216\1\0\1\166\1\0"+
    "\1\166\1\0\1\166\2\0\1\166\2\0\1\217\17\0"+
    "\1\166\11\0\3\166\2\0\1\166\1\0\1\166\1\0"+
    "\1\166\2\0\1\166\22\0\1\166\11\0\3\170\1\220"+
    "\1\0\1\170\1\0\1\170\1\0\1\170\1\125\1\0"+
    "\1\170\1\0\1\126\20\0\1\170\14\0\1\171\4\0"+
    "\1\107\1\0\1\125\3\0\1\126\1\172\31\0\3\221"+
    "\2\0\1\221\1\0\1\221\1\0\1\221\2\0\1\221"+
    "\22\0\1\221\12\0\2\173\1\222\4\0\1\107\6\0"+
    "\1\115\32\0\2\174\1\223\13\0\1\121\32\0\2\174"+
    "\47\0\2\176\1\224\6\0\1\134\3\0\1\135\35\0"+
    "\1\177\4\0\1\107\1\0\1\134\3\0\1\135\1\200"+
    "\32\0\2\225\50\0\1\201\1\226\4\0\1\107\6\0"+
    "\1\227\33\0\1\202\1\230\13\0\1\231\33\0\1\202"+
    "\50\0\1\204\1\232\6\0\1\142\3\0\1\143\35\0"+
    "\1\205\4\0\1\107\1\0\1\142\3\0\1\143\1\206"+
    "\33\0\1\233\46\0\1\234\65\0\1\235\36\0\1\211"+
    "\4\0\1\107\1\0\1\27\3\0\1\30\35\0\1\212"+
    "\4\0\1\107\43\0\1\213\50\0\1\214\4\0\1\107"+
    "\6\0\1\215\31\0\3\236\2\0\1\236\1\0\1\236"+
    "\1\0\1\236\2\0\1\236\22\0\1\236\14\0\1\216"+
    "\13\0\1\217\31\0\3\237\2\0\1\237\1\0\1\237"+
    "\1\0\1\237\2\0\1\237\22\0\1\237\14\0\1\220"+
    "\6\0\1\125\3\0\1\126\32\0\3\221\1\240\1\0"+
    "\1\221\1\0\1\221\1\107\1\221\1\125\1\0\1\221"+
    "\1\0\1\126\20\0\1\221\14\0\1\222\4\0\1\107"+
    "\6\0\1\115\34\0\1\223\13\0\1\121\34\0\1\224"+
    "\6\0\1\134\3\0\1\135\33\0\2\225\1\241\4\0"+
    "\1\107\1\0\1\134\3\0\1\135\35\0\1\226\4\0"+
    "\1\107\6\0\1\227\33\0\1\242\51\0\1\230\13\0"+
    "\1\231\33\0\1\243\51\0\1\232\6\0\1\142\3\0"+
    "\1\143\34\0\1\233\1\244\4\0\1\107\1\0\1\142"+
    "\3\0\1\143\43\0\1\102\47\0\1\245\40\0\3\236"+
    "\1\212\1\0\1\236\1\0\1\236\1\107\1\236\2\0"+
    "\1\236\22\0\1\236\11\0\3\237\1\213\1\0\1\237"+
    "\1\0\1\237\1\0\1\237\2\0\1\237\22\0\1\237"+
    "\14\0\1\240\4\0\1\107\1\0\1\125\3\0\1\126"+
    "\35\0\1\241\4\0\1\107\1\0\1\134\3\0\1\135"+
    "\34\0\1\242\1\212\4\0\1\107\42\0\1\243\1\213"+
    "\50\0\1\244\4\0\1\107\1\0\1\142\3\0\1\143"+
    "\66\0\1\234\10\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[5945];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;
  private static final char[] EMPTY_BUFFER = new char[0];
  private static final int YYEOF = -1;
  private static java.io.Reader zzReader = null; // Fake

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\6\1\10\11\5\1\4\0\1\1\5\0"+
    "\2\11\1\0\1\11\1\1\2\0\1\11\2\0\1\11"+
    "\3\1\3\0\1\1\2\0\2\1\5\0\1\1\2\0"+
    "\1\1\3\0\1\11\3\1\1\0\1\11\1\0\1\1"+
    "\1\11\4\0\1\1\2\0\3\1\4\0\1\1\1\0"+
    "\1\1\4\0\2\1\4\0\1\1\2\0\2\1\1\0"+
    "\1\1\4\0\2\1\1\0\1\1\1\0\1\1\1\0"+
    "\2\1\2\0\1\1\1\0\2\1\2\0\1\1\1\0"+
    "\2\1\3\0\1\1\1\0\1\1\2\0\1\1\1\0"+
    "\2\1\1\0\3\1\2\0\1\1\1\0\2\1\3\0"+
    "\3\1\1\0\2\1\1\0";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[165];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** this buffer may contains the current text array to be matched when it is cheap to acquire it */
  private char[] zzBufferArray;

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the textposition at the last state to be included in yytext */
  private int zzPushbackPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /**
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
  /*
  public final int getTokenStart(){
    return zzStartRead;
  }

  public final int getTokenEnd(){
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end,int initialState) {
    char [] buf = buffer.toString().substring(start,end).toCharArray();
    yyreset( new CharArrayReader( buf ) );
    yybegin(initialState);
  }
  
  public void reset(CharSequence buffer, int initialState){
    reset(buffer, 0, buffer.length(), initialState);
  }
  */


  public _SchemeLexer(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  public _SchemeLexer(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 170) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }

  public final int getTokenStart(){
    return zzStartRead;
  }

  public final int getTokenEnd(){
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end,int initialState){
    zzBuffer = buffer;
    zzBufferArray = com.intellij.util.text.CharArrayUtil.fromSequenceWithoutCopying(buffer);
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzPushbackPos = 0;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  // For Demetra compatibility
  public void reset(CharSequence buffer, int initialState){
    zzBuffer = buffer;
    zzBufferArray = null;
    zzCurrentPos = zzMarkedPos = zzStartRead = 0;
    zzPushbackPos = 0;
    zzAtEOF = false;
    zzAtBOL = true;
    zzEndRead = buffer.length();
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position <tt>pos</tt> from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBufferArray != null ? zzBufferArray[zzStartRead+pos]:zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() {
    if (!zzEOFDone) {
      zzEOFDone = true;
    
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;
    char[] zzBufferArrayL = zzBufferArray;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = zzLexicalState;


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL.charAt(zzCurrentPosL++);
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL.charAt(zzCurrentPosL++);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 10: 
          { return LEFT_CURLY;
          }
        case 24: break;
        case 14: 
          { return COMMA;
          }
        case 25: break;
        case 19: 
          { return COMMA_AT;
          }
        case 26: break;
        case 15: 
          { return COMMENT;
          }
        case 27: break;
        case 22: 
          { return CHAR_LITERAL;
          }
        case 28: break;
        case 1: 
          { return BAD_CHARACTER;
          }
        case 29: break;
        case 6: 
          { return LEFT_PAREN;
          }
        case 30: break;
        case 3: 
          { return IDENTIFIER;
          }
        case 31: break;
        case 13: 
          { return BACKQUOTE;
          }
        case 32: break;
        case 16: 
          { return FALSE;
          }
        case 33: break;
        case 17: 
          { return OPEN_VECTOR;
          }
        case 34: break;
        case 8: 
          { return LEFT_SQUARE;
          }
        case 35: break;
        case 7: 
          { return RIGHT_PAREN;
          }
        case 36: break;
        case 20: 
          { return STRING_LITERAL;
          }
        case 37: break;
        case 23: 
          { return DOTDOTDOT;
          }
        case 38: break;
        case 12: 
          { return QUOTE_MARK;
          }
        case 39: break;
        case 11: 
          { return RIGHT_CURLY;
          }
        case 40: break;
        case 5: 
          { return DOT;
          }
        case 41: break;
        case 18: 
          { return TRUE;
          }
        case 42: break;
        case 4: 
          { return NUMBER_LITERAL;
          }
        case 43: break;
        case 21: 
          { return ARROW;
          }
        case 44: break;
        case 2: 
          { return WHITESPACE;
          }
        case 45: break;
        case 9: 
          { return RIGHT_SQUARE;
          }
        case 46: break;
        default:
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            zzDoEOF();
            return null;
          }
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
